// server.js
import admin from 'firebase-admin';
import express from 'express';
import cookieParser from 'cookie-parser';
import dotenv from 'dotenv';
import cors from 'cors';
import { createRequire } from 'module';
import https from 'https';
import fs from 'fs';

const require = createRequire(import.meta.url);

// Load environment variables from .env file
dotenv.config();

// Initialize Firebase Admin SDK with your service account key
const serviceAccount = require(process.env.FIREBASE_SERVICE_ACCOUNT_KEY);
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const app = express();

// Configure CORS to allow requests from your frontend.
// The origin must match the protocol and port of your frontend.
app.use(cors({
  origin: 'https://localhost:5173',
  credentials: true
}));

app.use(express.json());
app.use(cookieParser());

// This is where you would place your certificate and key file paths
// The names have been updated to reflect the files generated by mkcert
const options = {
  key: fs.readFileSync('./localhost-key.pem'),
  cert: fs.readFileSync('./localhost.pem')
};

// Add a root route to handle GET requests to the base URL
app.get('/', (req, res) => {
    res.send('Server is running and ready to handle requests!');
});

// This endpoint exchanges the ID token for a session cookie
app.post('/sessionLogin', (req, res) => {
  const idToken = req.body.idToken.toString();

  const expiresIn = 60 * 60 * 24 * 3 * 1000;

  admin.auth().createSessionCookie(idToken, { expiresIn })
    .then((sessionCookie) => {
      res.cookie('session', sessionCookie, {
        maxAge: expiresIn,
        httpOnly: true,
        secure: true,
        sameSite: 'None'
      });
      res.status(200).send({ status: 'success' });
    })
    .catch(error => {
      console.error('Error creating session cookie:', error);
      res.status(401).send('UNAUTHORIZED REQUEST!');
    });
});

// An endpoint to log out the user by clearing the session cookie
app.post('/sessionLogout', (req, res) => {
    res.clearCookie('session');
    res.status(200).send({ status: 'success' });
});

// Middleware to verify session cookie for protected routes
const verifySession = (req, res, next) => {
  const sessionCookie = req.cookies.session || '';
  admin.auth().verifySessionCookie(sessionCookie, true)
    .then((decodedClaims) => {
      req.user = decodedClaims;
      next();
    })
    .catch(error => {
      res.status(401).send('UNAUTHORIZED!');
    });
};

// An endpoint to verify the session cookie on subsequent requests
app.get('/verifySession', verifySession, (req, res) => {
    res.status(200).send({
        status: 'authenticated',
        user: req.user
    });
});

// Start the HTTPS server
https.createServer(options, app).listen(3000, () => {
  console.log('HTTPS Server is running on port 3000');
});